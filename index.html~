<!doctype html>
<html lang="en">

<head>
<meta charset="utf-8">

<title>reveal.js - The HTML Presentation Framework</title>

<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
<meta name="author" content="Hakim El Hattab">

<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<link rel="stylesheet" href="css/reveal.min.css">
<link rel="stylesheet" href="css/theme/default.css" id="theme">

<!-- For syntax highlighting -->
<link rel="stylesheet" href="lib/css/zenburn.css">

<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
if( window.location.search.match( /print-pdf/gi ) ) {
	var link = document.createElement( 'link' );
	link.rel = 'stylesheet';
	link.type = 'text/css';
	link.href = 'css/print/pdf.css';
	document.getElementsByTagName( 'head' )[0].appendChild( link );
}
</script>

<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
</head>

<body>

<div class="reveal">

	<!-- Any section element inside of this container is displayed as a slide -->
	<div class="slides">
		<section data-markdown
			data-separator="\n---\n$"
			data-vertical="\n--\n">
			<script type="text/template">
# プログラミング基礎
2014/4/20

---

## 目次
* プログラミング概観
* 型、クラス、データ構造
  - プリミティブ型
  - クラス
  - データ構造
* オブジェクト指向プログラミング
  - カプセル化
  - 継承
  - ポリモーフィズム
* 新しいプログラミング
* プログラムが実行されるまで

---

## プログラミング概観

---

### どんな言語がある？

---

### プログラムをオートマトンで表すと


状態と状態遷移で表せる

### プログラミング言語で言うと
状態→変数

状態遷移→手続き、関数

---

## 型、クラス、データ構造

---

### 型とオブジェクト

プログラムを構成する要素(オブジェクト)は型に基づいて分類される

```
int i = 1; double d = 3.1415; char c = 'c'; Object obj;
```
※関数もオブジェクトとして変数と同様に扱う言語もある
```
var f = function();
```

---

### プリミティブ型

言語に予め備わっている基本的な型

* int
* float, double
* char, string
* atom, cell, etc...

```c:sample.cpp
int a = 1;
char b = 'b';
std::string c = "Hello world";
```
確保されるメモリの大きさ、格納するデータの種類(整数、小数、符号あり、なし、etc)が異なる

---

###クラス
データとそれに対する操作をセットにしたもの
```
class hito {
    private:
        std::string name;//名前
        int age;//年齢
    public:
        void setname(const std::string &str);//名前の設定
        void disp();//名前と年齢の表示
}
```
			</script>
		</section>
	</div>
</div>

	<script src="lib/js/head.min.js"></script>
	<script src="js/reveal.min.js"></script>

	<script>

// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
controls: true,
progress: true,
history: true,
center: true,
transition: 'slide',

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

// Parallax scrolling
// parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',
// parallaxBackgroundSize: '2100px 900px',

// Optional libraries used to extend on reveal.js
dependencies: [
{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
	]
	});

	</script>

	</body>
	</html>
